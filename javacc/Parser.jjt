options {

  LOOKAHEAD = 1;

}

PARSER_BEGIN(Parser)

public class Parser{

   public static void main(String args[]) throws ParseException {

   }

}

PARSER_END(Parser)

//characters to ignore/skip
SKIP: {
    " " 
  | "\r" 
  | "\t" 
  | "\n" 
  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> 
}

TOKEN: {

    < INTEGER : (["0" - "9"])+ >
  | < IDENTIFIER: ["a"-"z", "A"-"Z"](["_", "a"-"z", "A"-"Z", "0"-"9"])* >
  | < INT: "int" >
  | < BOOLEAN: "boolean" >
  | < STRING: "string" >
  | < SEMICOLON: ";" >
  | < COLON: "," >
  | < DOT: "." >
  | < TRUE: "true" >
  | < FALSE: "false" >
  | < NEW: "new" >
  | < THIS: "this" >
  | < LBRACKET: "{" >
  | < RBRACKET: "}" >
  | < LSQUAREBRACKET: "[" >
  | < RSQUAREBRACKET: "]" >
  | < LPAR: "(" >
  | < RPAR: ")" >
  | < PUBLIC: "public" >
  | < STATIC: "static" >
  | < VOID: "void" >
  | < MAIN: "main" >
  | < RETURN: "return" >
  | < EXTENDS: "extends" >
  | < IMPORT: "import" >
  | < CLASS: "class" >
  | < WHILE: "while" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < EQUAL: "=" >
  | < ADD: "+" >
  | < SUB: "-" >
  | < MUL: "*" >
  | < DIV: "/" >
  | < NOT: "!" >
  | < MINOR: "<" >
  | < AND: "&&" >
  | < LENGTH: "length" >
  
}

//Declarations

void Program() : {}
{
  ImportDeclaration() ClassDeclaration() <EOF>
}

void ImportDeclaration() : {}
{
  
}

void ClassDeclaration() : {}
{

}

void VarDeclaration() : {}
{

}


void MethodDeclaration() : {}
{

}



